{
  "hash": "ba0a7b61c6e46e0dbc2ac0af1b64449e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Episode Metrics Analysis\"\nsubtitle: \"TidyTuesday 2024-11-19\"\ndate: \"2024-11-19\"\nauthor: \"gnoblet\"\ncategories: [r, ggplot2, tidyverse, time-series, text-analysis] \n---\n\n## Overview\n\nThis week's TidyTuesday explored episode metrics from a TV series, analyzing various characteristics like dialogue density, sentiment variance, and episode length over time. I created a comprehensive time series analysis using R to track how these metrics evolved across seasons.\n\n## Dataset\n\nThe dataset contains episode-level metrics including:\n- Average episode length\n- Dialogue density\n- Sentiment variance\n- Unique word count\n- Question and exclamation ratios\n\n**Source**: [TidyTuesday Episode Metrics](https://github.com/rfordatascience/tidytuesday/tree/master/data/2024/2024-11-19)\n\n## Analysis\n\n### Data Preparation\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get data\ndf <- rio::import('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-11-19/episode_metrics.csv')\n\n# Create episode index by season and episode\ndf <- df |>\n  dyr$arrange(season, episode) |>\n  dyr$mutate(n = dyr$row_number())\n\n# Variables to analyze\nvars <- c(\"avg_length\", \"dialogue_density\", \"sentiment_variance\", \n          \"unique_words\", \"question_ratio\", \"exclamation_ratio\")\n```\n:::\n\n\n### Data Transformation Functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Base 100 transformation for comparing different metrics\nbase_100 <- function(df, step, var, suffix = \"_b100\") {\n  min_step_row <- which.min(df[[step]])\n  first_col_value <- df[[var]][min_step_row]\n  new_var <- paste0(var, suffix)\n  df[[new_var]] <- df[[var]] / first_col_value * 100\n  return(df)\n}\n\n# Apply base_100 to multiple variables\nvapply_base_100 <- function(df, step, vars) {\n  for (var in vars) {\n    df <- base_100(df, step, var)\n  }\n  return(df)\n}\n\n# Main transformation function\nmain <- function(df, step, vars) {\n  df <- vapply_base_100(df, step, vars)\n  vars_b100 <- paste0(vars, \"_b100\")\n  df <- tyr$pivot_longer(\n    df, \n    cols = all_of(vars_b100), \n    names_to = \"var\", \n    values_to = \"value\"\n  ) |> \n    dyr$select(season, episode, n, var, value)\n  return(df)\n}\n```\n:::\n\n\n### Data Processing\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform data for visualization\ndf_gg <- main(df, \"n\", vars)\n\n# Basic statistics\ntotal_episodes <- nrow(df)\ntotal_seasons <- max(df$season)\navg_episodes_per_season <- round(total_episodes / total_seasons, 1)\n\ncat(\"Dataset Overview:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDataset Overview:\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"- Total episodes:\", total_episodes, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- Total episodes: 272 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"- Total seasons:\", total_seasons, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- Total seasons: 14 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"- Average episodes per season:\", avg_episodes_per_season, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- Average episodes per season: 19.4 \n```\n\n\n:::\n:::\n\n\n## Visualization\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get season break points for vertical lines\nseason_breaks <- df_gg |>\n  dyr$group_by(season) |>\n  dyr$summarize(n = min(n), .groups = \"drop\") |>\n  dyr$pull(n)\n\n# Create the visualization\ndf_gg |>\n  gg$ggplot(gg$aes(x = n, y = value)) +\n  gg$geom_line(color = \"#667eea\", size = 0.8) +\n  gg$geom_point(color = \"#667eea\", size = 0.5, alpha = 0.6) +\n  gg$scale_y_continuous(breaks = seq(0, 150, 50)) +\n  gg$facet_wrap(~var, nrow = 3, scales = \"fixed\", strip.position = \"right\") +\n  gg$geom_vline(\n    xintercept = season_breaks, \n    linetype = \"dashed\", \n    color = \"#cccccc\",\n    alpha = 0.7\n  ) +\n  gghrbr$theme_ipsum_rc(base_size = 12) +\n  gg$labs(\n    x = \"Episode Number\",\n    y = \"Base-100 Index\",\n    title = \"Episode Metrics Evolution Over Time\",\n    subtitle = \"Tracking dialogue, sentiment, and linguistic patterns across seasons\",\n    caption = \"Data: TidyTuesday 2024-11-19 | Dashed lines indicate season breaks\"\n  ) +\n  gg$theme(\n    strip.text = gg$element_text(size = 10),\n    axis.title = gg$element_text(size = 11),\n    plot.title = gg$element_text(size = 16),\n    plot.subtitle = gg$element_text(size = 12)\n  )\n```\n\n::: {.cell-output-display}\n![](week_47_files/figure-html/plot-1.png){width=1344}\n:::\n:::\n\n\n### Individual Metric Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at original values for key metrics\nkey_metrics <- df |>\n  dyr$select(season, episode, n, avg_length, dialogue_density, sentiment_variance) |>\n  tyr$pivot_longer(\n    cols = c(avg_length, dialogue_density, sentiment_variance),\n    names_to = \"metric\",\n    values_to = \"value\"\n  )\n\ngg$ggplot(key_metrics, gg$aes(x = n, y = value, color = metric)) +\n  gg$geom_line(size = 0.8) +\n  gg$geom_point(size = 0.5, alpha = 0.6) +\n  gg$facet_wrap(~metric, scales = \"free_y\", nrow = 1) +\n  gg$geom_vline(\n    xintercept = season_breaks, \n    linetype = \"dashed\", \n    color = \"#cccccc\",\n    alpha = 0.7\n  ) +\n  gg$scale_color_manual(values = c(\"#667eea\", \"#764ba2\", \"#e74c3c\")) +\n  gghrbr$theme_ipsum_rc(base_size = 12) +\n  gg$labs(\n    x = \"Episode Number\",\n    y = \"Original Values\",\n    title = \"Key Episode Metrics in Original Scale\",\n    caption = \"Data: TidyTuesday 2024-11-19\"\n  ) +\n  gg$theme(\n    legend.position = \"none\",\n    strip.text = gg$element_text(size = 10)\n  )\n```\n\n::: {.cell-output-display}\n![](week_47_files/figure-html/individual-metrics-1.png){width=1152}\n:::\n:::\n\n\n## Save\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg$ggsave('week_47.png')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSaving 7 x 5 in image\n```\n\n\n:::\n:::\n\n\n## Technical Notes\n\n- **Base-100 Normalization**: Converts all metrics to a common scale for comparison\n- **Modular Programming**: Used `box` package for clean code organization\n- **Faceted Visualization**: Multiple metrics displayed simultaneously\n- **Season Markers**: Vertical lines indicate season boundaries\n\n## Viz\n\n![](week_47.png)\n",
    "supporting": [
      "week_47_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}